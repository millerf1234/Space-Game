{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-BoldItalic;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red128\green64\blue3;\red255\green255\blue255;\red0\green0\blue255;
\red0\green0\blue0;\red43\green131\blue159;\red150\green19\blue241;}
{\*\expandedcolortbl;;\cssrgb\c57875\c32152\c0;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c100000;
\csgenericrgb\c0\c0\c0;\csgenericrgb\c16900\c51200\c62500;\csgenericrgb\c59016\c7469\c94390;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\i\b\fs22 \cf2 \cb3 ///-----------------------------------------------------------------------------
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///                           GENERAL PROJECT NOTE(S)
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///(On Mac) To TEST KEYBOARD INPUT FUNCTIONALITY, OPEN CONSOLE AND TYPE:
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///                 open -a KeyboardViewer
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///         Chances are if the keyboard is anything like my Macbook Pro's keyboard
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///         it will not have n-key rollover, which means the way I designed the
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///         controls for this game will not actually ever work without using an
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///         external keyboard that does support n-key rollover.\
///\
///\
///\
///\
///(On Mac) It appears as though no matter what I try it is impossible to enable\
///         MSAA for this application. I tried using the GLFW hint to enable it \
///         and even tried turning it on directly with a gl_enable() call.\
///         I set up the code to verify whether MSAA (or really any anti-aliasing)\
///			is being used. Check in the GameParameters.h file and uncomment the \
///         #define PRINT_MSAA_INFO_FROM_GPU_DRIVER statement.\
///\
///\
///\
///\
///\
///\
///\
///\
///
\f1\i0\b0\fs24 \cf0 \

\f0\i\b\fs22 \cf2 ///-----------------------------------------------------------------------------\
\
\
\
From the socket programming book of network game programming. Class I started typing:\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f2\i0\b0 \cf4 \cb3 class\cf5  SocketAddress \{
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf4 \cb3 public\cf5 :
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3     SocketAddress(\cf6 uint32_t\cf5  inAddress, \cf6 uint16_t\cf5  \ulth i\ulnone nPort) \{
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3         \cf6 GetAsSockAddrIn\cf5 ()->\cf6 sin_family\cf5  = \cf4 AF_INET\cf5 ;
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3         \ulth GetAsSockAddrIn()->sin_addr\ulnone .\ulth S\ulnone _un.S_addr = \cf4 htonl\cf5 (inAddress);
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3     \}
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3     
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf4 \cb3 private\cf5 :
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3     \cf6 sockaddr\cf5  mSockAddr;
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3     
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3     \cf6 sockaddr_in\cf5 * GetAsSockAddrIn() \{
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3         \cf4 return\cf5  \cf4 reinterpret_cast\cf5 <\cf6 sockaddr_in\cf5  *>(&\cf7 mSockAddr\cf5 );
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3     \}
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf5 \cb3 \};
\f1\fs24 \cf0 \cb3 \

\f2\fs22 \cf4 \cb3 typedef\cf5  \cf6 std\cf5 ::\cf6 shared_ptr\cf5 <\cf6 SocketAddress\cf5 > SocketAddressPtr;}